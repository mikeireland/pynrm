#!/usr/bin/env python
"""This example script uses the psf_marginalise code to find the best PSF for each
target image in a set and subtract it off. Under the approximation that the residual is
comprised of random noise plus a faint copy of this PSF due to a companion, find the best
fit companion brightness and its error bar at each position in a 2D grid.

Job 1 for Alex: Write down in latex what this really means in terms of convolution, object
and image.

Job 2 for Alex: Compute (and understand) uncertainties that includes photon shot noise
from the target. This needs the "PGAIN" keyword to be passed as part of the header in
choose_psfs or its GUI version.
"""

from __future__ import print_function, division
import sys
import matplotlib.pyplot as plt
import numpy as np
import psf_marginalise as pm
import scipy.ndimage as nd
import astropy.io.fits as pyfits

if len(sys.argv)<2:
    print("Useage: best_psf_subtract [fits output from choose_psfs]")
    sys.exit()
filename = sys.argv[1]

#Create our target model and object model.
psfs = pm.Psfs(cubefile=filename)
object_model = pm.PtsrcObject()
tgt = pm.Target(psfs, object_model, cubefile=filename)

best_ixs, best_fit_ims = tgt.find_best_psfs([])

#Subtracted image - oriented so that N is up and E is left.
subims = tgt.ims - best_fit_ims
subim_sum = np.sum(subims, axis=0) 
plt.figure(1)
plt.clf()
plt.imshow(nd.rotate(subim_sum, -np.mean(tgt.pas), reshape=False)[::-1,:])
    
#We want to compute: \Sum (subims[i] * shift(best_fit_ims[i])) for 
#every possible shift value in 2D. This is just a cross-correlation!
#We can use the power of numpy by putting this in a single line.
#We are computing best_fit_ims [cross-correlation *] subims
crats = np.fft.fftshift(np.fft.irfft2(np.conj(np.fft.rfft2(best_fit_ims)) * np.fft.rfft2(subims) ), axes=[1,2])

#Now rotate and normalise
for i in range(len(crats)):
    crats[i] = nd.rotate(crats[i], -tgt.pas[i], reshape=False)[::-1,:]/np.sum(best_fit_ims[i]**2)

#We can also compute a background-limited standard deviation, and the crat uncertainty due to
#this. 
stds = np.empty(len(tgt.ims))
for i, im in enumerate(tgt.ims):
    stds[i] = np.std(im[tgt.corner_pix])
crat_std = tgt.ims
crat_errors = stds/np.sqrt(np.sum(best_fit_ims**2,axis=(1,2)))
