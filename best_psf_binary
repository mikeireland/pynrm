#!/usr/bin/env python
"""This example script uses the psf_marginalise code to find the best PSF for each
target image in a set and subtract it off. Under the approximation that the residual is
comprised of random noise plus a faint copy of this PSF due to a companion, find the best
fit companion brightness and its error bar at each position in a 2D grid.

Job 1 for Alex: Write down in latex what this really means in terms of convolution, object
and image.

Job 2 for Alex: Compute (and understand) uncertainties that includes photon shot noise
from the target. This needs the "PGAIN" keyword to be passed as part of the header in
choose_psfs or its GUI version.
"""

#e.g. /Users/mireland/tel/nirc2/redux/TauL15_4/good_ims_LkCa15.fits
#kernprof -l best_psf_binary /Users/mireland/tel/nirc2/redux/TauL15_4/good_ims_LkCa15.fits
#python -m line_profiler best_psf_binary.lprof

from __future__ import print_function, division
import sys
import matplotlib.pyplot as plt
import numpy as np
import psf_marginalise as pm
import scipy.ndimage as nd
import astropy.io.fits as pyfits

if len(sys.argv)<2:
    print("Useage: best_psf_subtract [fits output from choose_psfs]")
    sys.exit()
filename = sys.argv[1]

#Create our target model and object model.
psfs = pm.Psfs(cubefile=filename)
object_model = pm.BinaryObject(np.array([0.,0.,0.]))
tgt = pm.Target(psfs, object_model, cubefile=filename)

#Separations in pixels
north_seps = np.arange(-10,10)+.5
east_seps = np.arange(-10,10)+.5
contrasts = np.empty( (len(north_seps), len(east_seps)) )
for i in range(len(north_seps)):
    for j in range(len(east_seps)):
        initp = [north_seps[i], east_seps[i], 0]
        walker_sdev = [0,0,.01]
        best_x, sampler = tgt.marginalise_best_psf(init_par=initp,walker_sdev=walker_sdev, use_threads=False, nchain=10)
        contrasts[i,j] = best_x[2]
        

